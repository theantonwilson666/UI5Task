<core:View
	xmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"
	xmlns:unittest="http://schemas.sap.com/sapui5/preprocessorextension/sap.fe.unittesting/1"
	xmlns:customdata="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
	xmlns:core="sap.ui.core"
	xmlns:uxap="sap.uxap"
	xmlns="sap.m"
	xmlns:control="sap.fe.core.controls"
	xmlns:fe="sap.fe.templates.controls"
	xmlns:dt="sap.ui.dt"
	xmlns:macro="sap.fe.macros"
	controllerName="sap.fe.templates.ObjectPage.ObjectPageController"
	template:require="{
				MODEL: 'sap/ui/model/odata/v4/AnnotationHelper',
				OP: 'sap/fe/templates/ObjectPage/AnnotationHelper',
				CONTACT: 'sap/fe/macros/ContactHelper'
			}"
>
	<template:with path="entitySet>./" var="entityType">
		<template:with path="entityType>@com.sap.vocabularies.UI.v1.HeaderInfo" var="headerInfo">
			<template:with path="entitySet>" helper="OP.getEditAction" var="editAction">
				<template:with path="editAction>@Org.OData.Core.V1.OperationAvailable" var="operationAvailable">

					<!-- OPLayout binding contains explicit $select for SAP__Messages or the path from @Common.Messages until model provides an alternative.
				This is to enable side effects to request messages. -->
					<uxap:ObjectPageLayout
						id="fe::ObjectPage"
						flexEnabled="true"
						unittest:id="objectPageLayoutTest"
						customdata:showRelatedApps="{viewData>/showRelatedApps}"
						customdata:ObjectPageTitle="{headerInfo>TypeName}"
						customdata:ObjectPageSubtitle="{headerInfo>Title/Value@@MODEL.value}"
						showHeaderContent="{= ${viewData>/editableHeaderContent} === false ? true : '{= !(${ui>/editMode} === \'Editable\') }' }"
						showFooter="true"
						busy="{ui>/busy}"
						busyIndicatorDelay="0"
						showAnchorBar="{converterContext>showAnchorBar}"
						upperCaseAnchorBar="false"
						useIconTabBar="{converterContext>useIconTabBar}"
						enableLazyLoading="true"
						navigate=".handlers.onNavigateChange"
					>
						<uxap:dependents>
							<control:CommandExecution execute="_executeTabShortCut" command="NextTab" />
							<control:CommandExecution execute="_executeTabShortCut" command="PreviousTab" />
							<control:CommandExecution
								execute="._editDocument(${$view>/getBindingContext})"
								enabled="{= OP.getEnabledExpressionForHeaderActions(${operationAvailable>}, ${entitySet>@}, ${operationAvailable>@@MODEL.format}) }"
								visible="{= OP.getButtonVisiblityForHeaderActions(${entitySet>@}, %{entitySet>@com.sap.vocabularies.UI.v1.UpdateHidden@@MODEL.value}, ${entityType>@com.sap.vocabularies.UI.v1.UpdateHidden@@MODEL.value}) }"
								command="Edit"
							/>
							<control:CommandExecution
								execute="{= OP.getPressExpressionForDelete(${entitySet>@sapui.name}) }"
								visible="{= OP.getDeleteCommandExecutionVisible(${entitySet>@Org.OData.Capabilities.V1.DeleteRestrictions/Deletable@@MODEL.value}, ${viewData>viewLevel}, ${entitySet>@com.sap.vocabularies.UI.v1.DeleteHidden@@MODEL.value}, ${converterContext>headerActions}, ${entityType>@com.sap.vocabularies.UI.v1.DeleteHidden@@MODEL.value}) }"
								enabled="{= OP.getDeleteCommandExecutionEnabled(${entitySet>@Org.OData.Capabilities.V1.DeleteRestrictions/Deletable@@MODEL.value}, ${converterContext>headerActions}) }"
								command="DeleteObject"
							/>
							<control:CommandExecution
								execute="._saveDocument(${$view>/getBindingContext})"
								visible="{= ${ui>/editMode} === 'Editable' }"
								command="Save"
							/>
							<control:CommandExecution
								execute="._cancelDocument(${$view>/getBindingContext},{cancelButton:'fe::FooterBar::StandardAction::Cancel'})"
								visible="{= ${ui>/editMode} === 'Editable' }"
								command="Cancel"
							/>
							<control:CommandExecution
								execute=".handlers.onShareObjectPageActionButtonPress($event, $controller)"
								visible="{= ${fclhelper>/} ? ${fclhelper>/showShareIcon} : true }"
								command="Share"
							/>
						</uxap:dependents>
						<template:if test="{converterContext>showHeader}">
							<uxap:headerTitle>
								<uxap:ObjectPageDynamicHeaderTitle primaryArea="Begin">
									<uxap:expandedHeading>
										<FlexBox visible="{= ${viewData>/editableHeaderContent} ? '{= (${ui>/editMode} === \'Editable\') }' : false}">
											<core:Fragment fragmentName="sap.fe.templates.ObjectPage.view.fragments.HeaderImage" type="XML" />
										</FlexBox>
										<core:Fragment fragmentName="sap.fe.templates.ObjectPage.view.fragments.TitleAndSubtitle" type="XML" />
									</uxap:expandedHeading>
									<uxap:snappedHeading>
										<FlexBox>
											<core:Fragment fragmentName="sap.fe.templates.ObjectPage.view.fragments.HeaderImage" type="XML" />
										</FlexBox>
										<core:Fragment fragmentName="sap.fe.templates.ObjectPage.view.fragments.TitleAndSubtitle" type="XML" />
									</uxap:snappedHeading>
									<uxap:content>
										<template:if test="{entitySet>@com.sap.vocabularies.Common.v1.DraftRoot}">
											<macro:DraftIndicator DraftIndicatorType="IconOnly" class="sapUiTinyMarginBegin sapMTB sapMTBNewFlex" entitySet="{entitySet>}" />
										</template:if>
									</uxap:content>
									<uxap:navigationActions>
										<template:if test="{= ${viewData>/viewLevel} > 1}">
											<fe:Paginator
												id="fe::Paginator"
												width="auto"
												navigate="._routing.navigateToContext(${$parameters>context} , { callExtension: true, oEvent: ${$parameters>oEvent} })"
											>
											</fe:Paginator>
										</template:if>
										<!-- Flexible column layout menu-->
										<template:if test="{= ${viewData>/fclEnabled} }">
											<OverflowToolbarButton
												type="Transparent"
												icon="sap-icon://full-screen"
												visible="{= ${fclhelper>/actionButtonsInfo/fullScreen} !== null }"
												press="._routing.enterFullScreen()"
											/>
											<OverflowToolbarButton
												type="Transparent"
												icon="sap-icon://exit-full-screen"
												visible="{= ${fclhelper>/actionButtonsInfo/exitFullScreen} !== null }"
												press="._routing.exitFullScreen()"
											/>
											<OverflowToolbarButton
												type="Transparent"
												icon="sap-icon://decline"
												tooltip="{= ${sap.fe.i18n>C_COMMON_SAPFE_CLOSE} }"
												visible="{= ${fclhelper>/actionButtonsInfo/closeColumn} !== null }"
												press="._routing.closeColumn()"
											/>
										</template:if>
									</uxap:navigationActions>
									<uxap:actions>
										<core:Fragment fragmentName="sap.fe.templates.ObjectPage.view.fragments.Actions" type="XML" />
									</uxap:actions>
									<uxap:breadcrumbs>
										<Breadcrumbs
											unittest:id="BreadcrumbsTest"
											visible="{= OP.getVisibleExpressionForBreadcrumbs(${viewData>/}) }"
											modelContextChange="._setBreadcrumbLinks(${$source>/})"
											id="fe::Breadcrumbs"
										>
										</Breadcrumbs>
									</uxap:breadcrumbs>
								</uxap:ObjectPageDynamicHeaderTitle>
							</uxap:headerTitle>
							<uxap:headerContent>
								<FlexBox
									id="fe::HeaderContentContainer"
									unittest:id="FlexBoxTest"
									dt:designtime="sap/fe/templates/ObjectPage/designtime/FlexBox.designtime"
									wrap="Wrap"
									fitContainer="true"
									alignItems="Stretch"
								>
									<template:if test="{entityType>@com.sap.vocabularies.UI.v1.HeaderInfo/ImageUrl}">
										<template:then>
											<Avatar
												unittest:id="AvatarImageUrlTest"
												class="sapUiSmallMarginEnd sapUiSmallMarginBottom"
												src="{entityType>@com.sap.vocabularies.UI.v1.HeaderInfo/ImageUrl@@MODEL.value}"
												initials="{= CONTACT.getAvatarInitials(${entityType>@com.sap.vocabularies.UI.v1.HeaderInfo/Initials@@MODEL.format})}"
												fallbackIcon="{= ${entityType>@com.sap.vocabularies.UI.v1.HeaderInfo/TypeImageUrl} !== undefined ? ${entityType>@com.sap.vocabularies.UI.v1.HeaderInfo/TypeImageUrl} : (${entityType>./@com.sap.vocabularies.Common.v1.IsNaturalPerson} ? 'sap-icon://person-placeholder' : 'sap-icon://product') }"
												displayShape="{= ${entityType>./@com.sap.vocabularies.Common.v1.IsNaturalPerson} ? 'Circle' : 'Square'}"
												displaySize="XL"
											/>
										</template:then>
										<template:elseif test="{entityType>@com.sap.vocabularies.UI.v1.HeaderInfo/TypeImageUrl}">
											<Avatar
												unittest:id="AvatarTypeImageUrlTest"
												class="sapUiSmallMarginEnd sapUiSmallMarginBottom"
												src="{entityType>@com.sap.vocabularies.UI.v1.HeaderInfo/TypeImageUrl@@MODEL.value}"
												initials="{= CONTACT.getAvatarInitials(${entityType>@com.sap.vocabularies.UI.v1.HeaderInfo/Initials@@MODEL.format})}"
												fallbackIcon="{= ${entityType>./@com.sap.vocabularies.Common.v1.IsNaturalPerson} ? 'sap-icon://person-placeholder' : 'sap-icon://product'}"
												displayShape="{= ${entityType>./@com.sap.vocabularies.Common.v1.IsNaturalPerson} ? 'Circle' : 'Square'}"
												displaySize="XL"
											/>
										</template:elseif>
										<template:elseif test="{entityType>@com.sap.vocabularies.UI.v1.HeaderInfo/Initials}">
											<Avatar
												unittest:id="AvatarTypeInitialsTest"
												class="sapUiSmallMarginEnd sapUiSmallMarginBottom"
												initials="{= CONTACT.getAvatarInitials(${entityType>@com.sap.vocabularies.UI.v1.HeaderInfo/Initials@@MODEL.format})}"
												displayShape="{= ${entityType>./@com.sap.vocabularies.Common.v1.IsNaturalPerson} ? 'Circle' : 'Square'}"
												displaySize="XL"
											/>
										</template:elseif>
									</template:if>
									<core:Fragment fragmentName="sap.fe.templates.ObjectPage.view.fragments.HeaderContent" type="XML" />
								</FlexBox>
							</uxap:headerContent>
						</template:if>
						<uxap:sections>
							<core:Fragment fragmentName="sap.fe.templates.ObjectPage.view.fragments.Section" type="XML" />
						</uxap:sections>
						<uxap:footer>
							<core:Fragment fragmentName="sap.fe.templates.ObjectPage.view.fragments.FooterContent" type="XML" />
						</uxap:footer>
					</uxap:ObjectPageLayout>
				</template:with>
			</template:with>
		</template:with>
	</template:with>
</core:View>
