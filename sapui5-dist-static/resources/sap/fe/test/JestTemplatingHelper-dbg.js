sap.ui.define(["sap/fe/macros/internal/Field.metadata", "sap/fe/macros/PhantomUtil", "sap/ui/model/odata/v4/lib/_MetadataRequestor", "sap/ui/model/odata/v4/ODataMetaModel", "sap/ui/core/util/XMLPreprocessor", "sap/base/Log", "xpath", "fs", "@sap/cds-compiler", "prettier", "sap/ui/base/BindingParser", "sap/ui/model/json/JSONModel", "sap/ui/core/InvisibleText", "sap/fe/core/converters/ConverterContext", "sap/base/util/merge", "path"], function (FieldMetadata, PhantomUtil, _MetadataRequestor, ODataMetaModel, XMLPreprocessor, Log, xpath, fs, cds_compiler, prettier, BindingParser, JSONModel, InvisibleText, ConverterContext, merge, path) {
  "use strict";

  var _exports = {};
  var createConverterContext = ConverterContext.createConverterContext;
  var format = prettier.format;
  var to = cds_compiler.to;
  var compileSources = cds_compiler.compileSources;
  var compactModel = cds_compiler.compactModel;
  PhantomUtil.register(FieldMetadata);
  Log.setLevel(1, "sap.ui.core.util.XMLPreprocessor");
  jest.setTimeout(40000);
  var nameSpaceMap = {
    "macros": "sap.fe.macros",
    "control": "sap.fe.core.controls",
    "core": "sap.ui.core",
    "m": "sap.m",
    "mdc": "sap.ui.mdc",
    "mdcField": "sap.ui.mdc.field",
    "u": "sap.ui.unified",
    "macroMicroChart": "sap.fe.macros.microchart",
    "microChart": "sap.suite.ui.microchart"
  };
  var select = xpath.useNamespaces(nameSpaceMap);

  var registerMacro = function (macroMetadata) {
    PhantomUtil.register(macroMetadata);
  };

  _exports.registerMacro = registerMacro;

  var runXPathQuery = function (selector, xmldom) {
    return select(selector, xmldom);
  };

  expect.extend({
    toHaveControl: function (xmldom, selector) {
      var nodes = runXPathQuery("/root".concat(selector), xmldom);
      return {
        message: function () {
          var outputXml = serializeXML(xmldom);
          return "did not find controls matching ".concat(selector, " in generated xml:\n ").concat(outputXml);
        },
        pass: nodes && nodes.length >= 1
      };
    },
    toNotHaveControl: function (xmldom, selector) {
      var nodes = runXPathQuery("/root".concat(selector), xmldom);
      return {
        message: function () {
          var outputXml = serializeXML(xmldom);
          return "There is a control matching ".concat(selector, " in generated xml:\n ").concat(outputXml);
        },
        pass: nodes && nodes.length === 0
      };
    }
  });
  _exports.runXPathQuery = runXPathQuery;

  var getControlAttribute = function (controlSelector, attributeName, xmlDom) {
    var selector = "string(/root".concat(controlSelector, "/@").concat(attributeName, ")");
    return runXPathQuery(selector, xmlDom);
  };

  _exports.getControlAttribute = getControlAttribute;

  var serializeXML = function (xmlDom) {
    var serializer = new window.XMLSerializer();
    var xmlString = serializer.serializeToString(xmlDom).replace(/(?:[\t ]*(?:\r?\n|\r))+/g, "\n").replace(/\\"/g, '"');
    return format(xmlString, {
      parser: "html"
    });
  };
  /**
   * Compile a CDS file into an EDMX file.
   *
   * @param sCDSUrl {string} the path to the file containing the CDS definition. This file MUST declare the namespace
   * sap.fe.test and a service JestService
   * @returns {string} edmxUrl the path of the generated EDMX
   */


  _exports.serializeXML = serializeXML;

  var compileCDS = function (sCDSUrl) {
    var cdsString = fs.readFileSync(sCDSUrl, "utf-8");
    var csn = compileSources({
      "string.cds": cdsString
    }, {});
    var csnModel = compactModel(csn);
    var edmxContent = to.edmx(csnModel, {
      service: "sap.fe.test.JestService"
    });
    var dir = path.resolve(sCDSUrl, "..", "gen");
    var edmxUrl = path.resolve(dir, path.basename(sCDSUrl).replace(".cds", ".xml"));

    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir);
    }

    fs.writeFileSync(edmxUrl, edmxContent);
    return edmxUrl;
  };

  _exports.compileCDS = compileCDS;

  var getFakeShellService = function () {
    var contentDensities = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "compact";
    return {
      getContentDensity: function () {
        return contentDensities;
      }
    };
  };

  _exports.getFakeShellService = getFakeShellService;

  var getFakeDiagnostics = function () {
    var issues = [];
    return {
      addIssue: function (issueCategory, issueSeverity, details) {
        issues.push({
          issueCategory: issueCategory,
          issueSeverity: issueSeverity,
          details: details
        });
      },
      getIssues: function () {
        return issues;
      },
      checkIfIssueExists: function (issueCategory, issueSeverity, details) {
        return issues.find(function (issue) {
          issue.issueCategory === issueCategory && issue.issueSeverity === issueSeverity && issue.details === details;
        });
      }
    };
  };

  _exports.getFakeDiagnostics = getFakeDiagnostics;

  var getConverterContext = function (convertedTypes, manifestSettings, templateType) {
    var userContentDensities = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "compact";
    var entitySet = convertedTypes.entitySets.find(function (es) {
      return es.name === manifestSettings.entitySet;
    });
    var dataModelPath = getDataModelObjectPathForProperty(entitySet, entitySet);
    return createConverterContext(convertedTypes, manifestSettings, templateType, getFakeShellService(userContentDensities), getFakeDiagnostics(), merge, dataModelPath);
  };

  _exports.getConverterContext = getConverterContext;

  var getMetaModel = function (sMetadataUrl) {
    try {
      var oRequestor = _MetadataRequestor.create({}, "4.0", {});

      var oMetaModel = new ODataMetaModel(oRequestor, sMetadataUrl, undefined, null);
      return Promise.resolve(oMetaModel.fetchEntityContainer()).then(function () {
        return oMetaModel;
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _exports.getMetaModel = getMetaModel;

  var getDataModelObjectPathForProperty = function (entitySet, property) {
    var targetPath = {
      startingEntitySet: entitySet,
      navigationProperties: [],
      targetObject: property,
      targetEntitySet: entitySet,
      targetEntityType: entitySet.entityType
    };
    targetPath.contextLocation = targetPath;
    return targetPath;
  };

  _exports.getDataModelObjectPathForProperty = getDataModelObjectPathForProperty;

  var evaluateBinding = function (bindingString) {
    var bindingElement = BindingParser.complexParser(bindingString);

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return bindingElement.formatter.apply(undefined, args);
  };

  _exports.evaluateBinding = evaluateBinding;

  var evaluateBindingWithModel = function (bindingString, modelContent) {
    var bindingElement = BindingParser.complexParser(bindingString);
    var jsonModel = new JSONModel(modelContent);
    var text = new InvisibleText();
    text.bindProperty("text", bindingElement);
    text.setModel(jsonModel);
    text.setBindingContext(jsonModel.createBindingContext("/"));
    return text.getText();
  };

  _exports.evaluateBindingWithModel = evaluateBindingWithModel;

  var getTemplatingResult = function (xmlInput, sMetadataUrl, mBindingContexts, mModels) {
    try {
      var templatedXml = "<root>".concat(xmlInput, "</root>");
      var parser = new window.DOMParser();
      var xmlDoc = parser.parseFromString(templatedXml, "text/xml");
      return Promise.resolve(getMetaModel(sMetadataUrl)).then(function (oMetaModel) {
        var oPreprocessorSettings = {
          models: Object.assign({
            metaModel: oMetaModel
          }, mModels),
          bindingContexts: {}
        }; //Inject models and bindingContexts

        Object.keys(mBindingContexts).forEach(function (sKey) {
          /* Assert to make sure the annotations are in the test metadata -> avoid misleading tests */
          expect(typeof oMetaModel.getObject(mBindingContexts[sKey])).toBeDefined();
          var oModel = mModels[sKey] || oMetaModel;
          oPreprocessorSettings.bindingContexts[sKey] = oModel.createBindingContext(mBindingContexts[sKey]); //Value is sPath

          oPreprocessorSettings.models[sKey] = oModel;
        }); //This context for macro testing

        if (oPreprocessorSettings.models["this"]) {
          oPreprocessorSettings.bindingContexts["this"] = oPreprocessorSettings.models["this"].createBindingContext("/");
        }

        return XMLPreprocessor.process(xmlDoc.firstElementChild, {
          name: "Test Fragment"
        }, oPreprocessorSettings);
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _exports.getTemplatingResult = getTemplatingResult;
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,