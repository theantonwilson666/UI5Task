<core:FragmentDefinition
	xmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"
	xmlns:unittest="http://schemas.sap.com/sapui5/preprocessorextension/sap.fe.unittesting/1"
	xmlns:log="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
	xmlns="sap.m"
	xmlns:core="sap.ui.core"
	template:require="{
							MODEL: 'sap/ui/model/odata/v4/AnnotationHelper',
							COMMON: 'sap/fe/macros/CommonHelper',
							FIELD: 'sap/fe/macros/field/FieldHelper',
							ID: 'sap/fe/core/helpers/StableIdHelper',
							UI: 'sap/fe/core/templating/UIFormatters'
						 }"
>

	<template:if test="{= FIELD.hasStaticUnitOrCurrency(${property>$Path@})}">
		<template:then>
			<Input
				log:sourcePath="{this>dataSourcePath}"
				core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
				id="{= (${this>idPrefix} ? ID.generate([${this>idPrefix}, 'Field-edit']) : undefined) }"
				value="{this>valueBindingExpression}"
				width="100%"
				fieldWidth="70%"
				description="{= FIELD.getStaticUnitOrCurrency(${property>$Path@})}"
				editable="{= UI.getEditableExpression(${property>@@UI.getConverterContext})}"
				enabled="{= UI.getEnabledExpression(${property>@@UI.getConverterContext})}"
				required="{= FIELD.getRequiredForDataField(${property>$Path@@FIELD.fieldControl}, ${this>editMode})}"
				change="FieldRuntime.handleChange($controller, $event)"
				textAlign="{parts: [{path:'dataField>'}, {path:'this>formatOptions'}, {path:'property>@@FIELD.getPropertyCollection'}, {path:'this>editModeAsObject'}, {path:'property>@@UI.getConverterContext'}], formatter:'FIELD.getTypeAlignment'}"
				fieldGroupIds="{parts:[{path:'dataField>Value/$Path'}, {path:'entityType>'}], formatter: 'FIELD.getFieldGroupIds'}"
				validateFieldGroup="FieldRuntime.handleSideEffect($event)"
			/>
		</template:then>
		<template:else>
			<template:with path="property>$Path@" helper="FIELD.getUnitOrCurrency" var="unit">

				<Input
					log:sourcePath="{this>dataSourcePath}"
					core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
					id="{= (${this>idPrefix} ? ID.generate([${this>idPrefix}, 'Field-edit']) : undefined) }"
					value="{this>valueBindingExpression}"
					width="{= UI.ifUnitEditable(${property>@@UI.getConverterContext},'70%','100%')}"
					fieldWidth="{= UI.ifUnitEditable(${property>@@UI.getConverterContext}, '100%' , '70%')}"
					description="{parts:[{path:'property>@@UI.getConverterContext'}, {value:''}, {path:'unit>@@MODEL.value'}], formatter:'UI.ifUnitEditable'}"
					editable="{= UI.getEditableExpression(${property>@@UI.getConverterContext})}"
					enabled="{= UI.getEnabledExpression(${property>@@UI.getConverterContext})}"
					required="{= FIELD.getRequiredForDataField(${property>$Path@@FIELD.fieldControl}, ${this>editMode})}"
					change="FieldRuntime.handleChange($controller, $event)"
					textAlign="{parts: [{path:'dataField>'}, {path:'this>formatOptions'}, {path:'property>@@FIELD.getPropertyCollection'}, {path:'this>editModeAsObject'}, {path:'property>@@UI.getConverterContext'}], formatter:'FIELD.getTypeAlignment'}"
					fieldGroupIds="{parts:[{path:'dataField>Value/$Path'}, {path:'entityType>'}], formatter: 'FIELD.getFieldGroupIds'}"
					validateFieldGroup="FieldRuntime.handleSideEffect($event)"
				/>
				<Input
					log:sourcePath="{this>dataSourcePath}"
					core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
					id="{= (${this>idPrefix} ? ID.generate([${this>idPrefix}, 'Field-unitEdit']) : undefined) }"
					value="{this>unitBindingExpression}"
					width="30%"
					editable="true"
					enabled="{= UI.getEnabledExpression(${property>@@UI.getConverterContext})}"
					change="FieldRuntime.handleChange($controller, $event)"
					textAlign="{parts: [{path:'dataField>'}, {path:'this>formatOptions'}, {path:'property>@@FIELD.getPropertyCollection'}, {path:'this>editModeAsObject'}, {path:'property>@@UI.getConverterContext'}], formatter:'FIELD.getTypeAlignment'}"
					fieldGroupIds="{parts:[{path:'dataField>Value/$Path'}, {path:'entityType>'}], formatter: 'FIELD.getFieldGroupIds'}"
					validateFieldGroup="FieldRuntime.handleSideEffect($event)"
					visible="{= UI.ifUnitEditable(${property>@@UI.getConverterContext},true,false)}"
				/>
			</template:with>
		</template:else>
	</template:if>

</core:FragmentDefinition>
