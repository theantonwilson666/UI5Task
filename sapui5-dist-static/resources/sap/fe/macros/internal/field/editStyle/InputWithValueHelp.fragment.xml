<!--
    /**
     * This fragment renders a DataField
     * @param entitySet context to the EntitySet
     * @param dataField context to the DataField
     * @param property context to the Property Path
	 * @param wrap wrapping allowed for a field or not
	 * wrap Boolean: true, false
	 * Incoming from Field.fragment.xml
 	 * 	 @param idPrefix default 'F' Prefix for the id
 	 * 	 @param vhIdPrefix default 'FieldValueHelp' Prefix for the value help id
     * @returns
     */
-->
<core:FragmentDefinition
	xmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"
	xmlns:unittest="http://schemas.sap.com/sapui5/preprocessorextension/sap.fe.unittesting/1"
	xmlns="sap.m"
	xmlns:core="sap.ui.core"
	xmlns:control="sap.fe.core.controls"
	xmlns:mdc="sap.ui.mdc"
	xmlns:log="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
	xmlns:macro="sap.fe.macros"
	template:require="{
							MODEL: 'sap/ui/model/odata/v4/AnnotationHelper',
							COMMON: 'sap/fe/macros/CommonHelper',
							FIELD: 'sap/fe/macros/field/FieldHelper',
							ID: 'sap/fe/core/helpers/StableIdHelper',
							UI: 'sap/fe/core/templating/UIFormatters',
							ValueHelpTemplating: 'sap/fe/macros/internal/valuehelp/ValueHelpTemplating',
							Property: 'sap/fe/core/templating/PropertyFormatters'
	}"
>

	<mdc:Field
		unittest:id="MacroDataField"
		core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
		delegate="{name: 'sap/ui/mdc/odata/v4/FieldBaseDelegate'}"
		id="{= ${this>idPrefix} ? ID.generate([${this>idPrefix}, 'Field-edit']) : undefined }"
		log:sourcePath="{this>dataSourcePath}"
		value="{this>valueBindingExpression}"
		placeholder="{property>$Path@com.sap.vocabularies.UI.v1.Placeholder@@MODEL.value}"
		editMode="{this>editMode}"
		width="100%"
		required="{= FIELD.getRequiredForDataField(${property>$Path@@FIELD.fieldControl}, ${this>editMode})}"
		additionalValue="{this>textBindingExpression}"
		display="{= UI.getFieldDisplay(${property>@@UI.getConverterContext}, ${this>formatOptions/displayMode}, ${this>editModeAsObject})}"
		multipleLines="{= FIELD.getMultipleLinesForDataField(${this>}, ${property>$Path/$Type}, ${property>$Path@com.sap.vocabularies.UI.v1.MultiLineText}) }"
		fieldHelp="{= ${valueHelpProperty>@@Property.hasValueHelp} ? ValueHelpTemplating.generateID(${this>_vhFlexId},${this>vhIdPrefix},${property>@@Property.getRelativePropertyPath},${valueHelpProperty>@@Property.getRelativePropertyPath}) : undefined}"
		fieldGroupIds="{parts:[{path:'dataField>Value/$Path'}, {path:'entityType>'}], formatter: 'FIELD.getFieldGroupIds'}"
		change="FieldRuntime.handleChange($controller, $event)"
		textAlign="{parts: [{path:'dataField>'}, {path:'this>formatOptions'}, {path:'property>@@FIELD.getPropertyCollection'}, {path:'this>editModeAsObject'}, {path:'property>@@UI.getConverterContext'}], formatter:'FIELD.getTypeAlignment'}"
		validateFieldGroup="FieldRuntime.handleSideEffect($event)"
		ariaLabelledBy="{this>ariaLabelledBy}"
	>
		<template:if test="{= (${property>$Path/$Type} === 'Edm.String') &amp;&amp;	${property>$Path@com.sap.vocabularies.UI.v1.MultiLineText} }">
			<!-- MultiLineText on Object Page -->
			<mdc:contentEdit>
				<TextArea
					value="{this>valueBindingExpression}"
					required="{= FIELD.getRequiredForDataField(${property>$Path@@FIELD.fieldControl}, ${this>editMode})}"
					rows="{this>formatOptions/textLinesEdit}"
					width="100%"
					change="FieldRuntime.handleChange($controller, $event)"
					fieldGroupIds="{parts:[{path:'dataField>Value/$Path'}, {path:'entityType>'}], formatter: 'FIELD.getFieldGroupIds'}"
				/>
			</mdc:contentEdit>
		</template:if>
	</mdc:Field>

</core:FragmentDefinition>
