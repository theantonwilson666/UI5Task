sap.ui.define(["./PropertyHelper", "./UIFormatters", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/templating/DataModelPathHelper"], function (PropertyHelper, UIFormatters, MetaModelConverter, DataModelPathHelper) {
  "use strict";

  var _exports = {};
  var getTargetObjectPath = DataModelPathHelper.getTargetObjectPath;
  var enhanceDataModelPath = DataModelPathHelper.enhanceDataModelPath;
  var getInvolvedDataModelObjects = MetaModelConverter.getInvolvedDataModelObjects;
  var getConverterContext = UIFormatters.getConverterContext;

  var getProperty = function (oContext, oInterface) {
    var sPath = oInterface.context.getPath();

    if (!oContext) {
      throw new Error("Unresolved context path " + sPath);
    }

    var isPath = false;

    if (typeof oContext === "object" && oContext.hasOwnProperty("$Path")) {
      isPath = true;
    } else if (typeof oContext === "object" && oContext.hasOwnProperty("$kind") && oContext.$kind !== "Property") {
      throw new Error("Context does not resolve to a Property object but to a " + oContext.$kind);
    }

    var oConverterContext = getConverterContext(oContext, oInterface);

    if (isPath) {
      oConverterContext = oConverterContext.$target;
    }

    return oConverterContext;
  };

  _exports.getProperty = getProperty;

  var getPropertyObjectPath = function (oContext, oInterface) {
    var sPath = oInterface.context.getPath();

    if (!oContext) {
      throw new Error("Unresolved context path " + sPath);
    }

    if (typeof oContext === "object" && oContext.hasOwnProperty("$kind") && oContext.$kind !== "Property") {
      throw new Error("Context does not resolve to a Property object but to a " + oContext.$kind);
    }

    var involvedDataModelObjects = getInvolvedDataModelObjects(oInterface.context);

    if (involvedDataModelObjects.targetObject && involvedDataModelObjects.targetObject.type === "Path") {
      involvedDataModelObjects = enhanceDataModelPath(involvedDataModelObjects, involvedDataModelObjects.targetObject.path);
    }

    if (sPath.endsWith("$Path")) {
      involvedDataModelObjects = enhanceDataModelPath(involvedDataModelObjects, oContext);
    }

    return involvedDataModelObjects;
  };

  _exports.getPropertyObjectPath = getPropertyObjectPath;

  var isKey = function (oContext, oInterface) {
    var oProperty = getProperty(oContext, oInterface);
    return PropertyHelper.isKey(oProperty);
  };

  _exports.isKey = isKey;

  var hasValueHelp = function (oContext, oInterface) {
    var oProperty = getProperty(oContext, oInterface);
    return PropertyHelper.hasValueHelp(oProperty);
  };

  _exports.hasValueHelp = hasValueHelp;

  var hasDateType = function (oContext, oInterface) {
    var oProperty = getProperty(oContext, oInterface);
    return PropertyHelper.hasDateType(oProperty);
  };

  _exports.hasDateType = hasDateType;

  var hasValueHelpWithFixedValues = function (oContext, oInterface) {
    var oProperty = getProperty(oContext, oInterface);
    return PropertyHelper.hasValueHelpWithFixedValues(oProperty);
  };

  _exports.hasValueHelpWithFixedValues = hasValueHelpWithFixedValues;

  var getName = function (oContext, oInterface) {
    var oProperty = getProperty(oContext, oInterface);
    return oProperty.name;
  };

  _exports.getName = getName;

  var getLabel = function (oContext, oInterface) {
    var oProperty = getProperty(oContext, oInterface);
    return PropertyHelper.getLabel(oProperty);
  };

  _exports.getLabel = getLabel;

  var getPropertyPath = function (oContext, oInterface) {
    var propertyPath = getPropertyObjectPath(oContext, oInterface);
    return getTargetObjectPath(propertyPath);
  };

  _exports.getPropertyPath = getPropertyPath;

  var getRelativePropertyPath = function (oContext, oInterface) {
    var propertyPath = getPropertyObjectPath(oContext, oInterface);
    return getTargetObjectPath(propertyPath, true);
  };

  _exports.getRelativePropertyPath = getRelativePropertyPath;
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,