sap.ui.define(["../controls/ObjectPage/SubSection", "../controls/ObjectPage/HeaderFacet", "./BaseConverter", "../helpers/ID", "../helpers/ConfigurableObject", "sap/fe/core/converters/controls/Common/Action", "sap/fe/core/converters/objectPage/HeaderAndFooterAction", "sap/fe/core/helpers/BindingExpression"], function (SubSection, HeaderFacet, BaseConverter, ID, ConfigurableObject, Action, HeaderAndFooterAction, BindingExpression) {
  "use strict";

  var _exports = {};
  var not = BindingExpression.not;
  var equal = BindingExpression.equal;
  var compileBinding = BindingExpression.compileBinding;
  var annotationExpression = BindingExpression.annotationExpression;
  var getHiddenHeaderActions = HeaderAndFooterAction.getHiddenHeaderActions;
  var getFooterDefaultActions = HeaderAndFooterAction.getFooterDefaultActions;
  var getHeaderDefaultActions = HeaderAndFooterAction.getHeaderDefaultActions;
  var removeDuplicateActions = Action.removeDuplicateActions;
  var getActionsFromManifest = Action.getActionsFromManifest;
  var Placement = ConfigurableObject.Placement;
  var insertCustomElements = ConfigurableObject.insertCustomElements;
  var SectionID = ID.SectionID;
  var EditableHeaderSectionID = ID.EditableHeaderSectionID;
  var CustomSectionID = ID.CustomSectionID;
  var TemplateType = BaseConverter.TemplateType;
  var getHeaderFacetsFromManifest = HeaderFacet.getHeaderFacetsFromManifest;
  var getHeaderFacetsFromAnnotations = HeaderFacet.getHeaderFacetsFromAnnotations;
  var createSubSections = SubSection.createSubSections;
  var createCustomSubSections = SubSection.createCustomSubSections;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var getSectionKey = function (facetDefinition, fallback) {
    var _facetDefinition$ID, _facetDefinition$Labe;

    return ((_facetDefinition$ID = facetDefinition.ID) === null || _facetDefinition$ID === void 0 ? void 0 : _facetDefinition$ID.toString()) || ((_facetDefinition$Labe = facetDefinition.Label) === null || _facetDefinition$Labe === void 0 ? void 0 : _facetDefinition$Labe.toString()) || fallback;
  };
  /**
   * Create a section that represents the editable header part, it is only visible in edit mode.
   *
   * @param converterContext
   * @param headerFacets
   * @returns {ObjectPageSection} the section representing the editable header parts
   */


  function createEditableHeaderSection(converterContext, headerFacets) {
    var editableHeaderSectionID = EditableHeaderSectionID();
    var headerSection = {
      id: editableHeaderSectionID,
      key: "EditableHeaderContent",
      title: "{sap.fe.i18n>T_COMMON_OBJECT_PAGE_HEADER_SECTION}",
      visible: "{= ${ui>/editMode} === 'Editable' }",
      subSections: headerFacets ? createSubSections(headerFacets, converterContext) : []
    };
    return headerSection;
  }
  /*
   function createEditableHeaderSection(headerFacets: HeaderFacets, converterContext: ConverterContext): ObjectPageSection {
  	const editableHeaderSectionID = EditableHeaderSectionID();
  	// treat UI.HeaderFacets as CollectionFacet to generate one Form with n FormContainers (instead of n Forms with one FormContainer each)
  	// alternative: define specific ObjectPageEditableHeaderSection type to be used instead of ObjectPageSection
  	const headerFacetWrapper = {
  		$Type: UIAnnotationTypes.CollectionFacet,
  		Facets: headerFacets
  	} as CollectionFacetTypes;
  	const headerSection: ObjectPageSection = {
  		id: editableHeaderSectionID,
  		key: "EditableHeaderContent",
  		title: "{sap.fe.i18n>T_COMMON_OBJECT_PAGE_HEADER_SECTION}",
  		visible: "{= ${ui>/editMode} === 'Editable' }",
  		subSections: createSubSections([headerFacetWrapper], converterContext)
  	};
  	return headerSection;
  }
  */

  /**
   * Creates section definition based on Facet annotation.
   *
   * @param converterContext the converter context
   * @returns {ObjectPageSection[]} all sections
   */


  function getSectionsFromAnnotation(converterContext) {
    var _entityType$annotatio, _entityType$annotatio2, _entityType$annotatio3;

    var entityType = converterContext.getEntityType();
    var objectPageSections = ((_entityType$annotatio = entityType.annotations) === null || _entityType$annotatio === void 0 ? void 0 : (_entityType$annotatio2 = _entityType$annotatio.UI) === null || _entityType$annotatio2 === void 0 ? void 0 : (_entityType$annotatio3 = _entityType$annotatio2.Facets) === null || _entityType$annotatio3 === void 0 ? void 0 : _entityType$annotatio3.map(function (facetDefinition) {
      return getSectionFromAnnotation(facetDefinition, converterContext);
    })) || [];
    return objectPageSections;
  }
  /**
   * Create an annotation based section.
   *
   * @param facet
   * @param converterContext
   * @returns {ObjectPageSection} the current section
   */


  function getSectionFromAnnotation(facet, converterContext) {
    var _facet$annotations, _facet$annotations$UI, _facet$annotations$UI2;

    var sectionID = SectionID({
      Facet: facet
    });
    var section = {
      id: sectionID,
      key: getSectionKey(facet, sectionID),
      title: compileBinding(annotationExpression(facet.Label)),
      showTitle: !!facet.Label,
      visible: compileBinding(not(equal(annotationExpression((_facet$annotations = facet.annotations) === null || _facet$annotations === void 0 ? void 0 : (_facet$annotations$UI = _facet$annotations.UI) === null || _facet$annotations$UI === void 0 ? void 0 : (_facet$annotations$UI2 = _facet$annotations$UI.Hidden) === null || _facet$annotations$UI2 === void 0 ? void 0 : _facet$annotations$UI2.valueOf()), true))),
      subSections: createSubSections([facet], converterContext)
    };
    return section;
  }
  /**
   * Creates section definition based on manifest definition.
   * @param manifestSections the manifest defined sections
   * @param converterContext
   * @returns {Record<string, CustomObjectPageSection>} the manifest defined sections
   */


  function getSectionsFromManifest(manifestSections, converterContext) {
    var sections = {};
    Object.keys(manifestSections).forEach(function (manifestSectionKey) {
      sections[manifestSectionKey] = getSectionFromManifest(manifestSections[manifestSectionKey], manifestSectionKey, converterContext);
    });
    return sections;
  }
  /**
   * Create a manifest based custom section.
   * @param customSectionDefinition
   * @param sectionKey
   * @param converterContext
   * @returns {CustomObjectPageSection} the current custom section
   */


  function getSectionFromManifest(customSectionDefinition, sectionKey, converterContext) {
    var customSectionID = customSectionDefinition.id || CustomSectionID(sectionKey);
    var position = customSectionDefinition.position;

    if (!position) {
      position = {
        placement: Placement.After
      };
    }

    var manifestSubSections;

    if (!customSectionDefinition.subSections) {
      // If there is no subSection defined, we add the content of the custom section as subsections
      // and make sure to set the visibility to 'true', as the actual visibility is handled by the section itself
      manifestSubSections = _defineProperty({}, sectionKey, _objectSpread({}, customSectionDefinition, {
        position: undefined,
        visible: true
      }));
    } else {
      manifestSubSections = customSectionDefinition.subSections;
    }

    var subSections = createCustomSubSections(manifestSubSections, converterContext);
    var customSection = {
      id: customSectionID,
      key: sectionKey,
      title: customSectionDefinition.title,
      showTitle: !!customSectionDefinition.title,
      visible: customSectionDefinition.visible !== undefined ? customSectionDefinition.visible : true,
      position: position,
      subSections: insertCustomElements([], subSections, {
        "title": "overwrite",
        "actions": "merge"
      })
    };
    return customSection;
  }

  var convertPage = function (converterContext) {
    var _entityType$annotatio4, _entityType$annotatio5;

    var manifestWrapper = converterContext.getManifestWrapper();
    var headerSection;
    var entityType = converterContext.getEntityType(); // Retrieve all header facets (from annotations & custom)

    var headerFacets = insertCustomElements(getHeaderFacetsFromAnnotations(converterContext), getHeaderFacetsFromManifest(manifestWrapper.getHeaderFacets()));
    var aAnnotationHeaderActions = getHeaderDefaultActions(converterContext); // Retrieve the page header actions

    var headerActions = insertCustomElements(aAnnotationHeaderActions, getActionsFromManifest(manifestWrapper.getHeaderActions(), converterContext, aAnnotationHeaderActions, undefined, undefined, getHiddenHeaderActions(converterContext)), {
      isNavigable: "overwrite",
      enabled: "overwrite"
    });
    var aAnnotationFooterActions = getFooterDefaultActions(manifestWrapper.getViewLevel(), converterContext); // Retrieve the page footer actions

    var footerActions = insertCustomElements(aAnnotationFooterActions, getActionsFromManifest(manifestWrapper.getFooterActions(), converterContext, aAnnotationFooterActions), {
      isNavigable: "overwrite",
      enabled: "overwrite"
    });

    if (manifestWrapper.isHeaderEditable() && (((_entityType$annotatio4 = entityType.annotations.UI) === null || _entityType$annotatio4 === void 0 ? void 0 : _entityType$annotatio4.HeaderFacets) || ((_entityType$annotatio5 = entityType.annotations.UI) === null || _entityType$annotatio5 === void 0 ? void 0 : _entityType$annotatio5.HeaderInfo))) {
      var _entityType$annotatio6;

      headerSection = createEditableHeaderSection(converterContext, (_entityType$annotatio6 = entityType.annotations.UI) === null || _entityType$annotatio6 === void 0 ? void 0 : _entityType$annotatio6.HeaderFacets);
    }

    var sections = insertCustomElements(getSectionsFromAnnotation(converterContext), getSectionsFromManifest(manifestWrapper.getSections(), converterContext), {
      "title": "overwrite",
      "visible": "overwrite",
      "subSections": {
        "actions": "merge",
        "title": "overwrite",
        "sideContent": "overwrite"
      }
    });
    return {
      template: TemplateType.ObjectPage,
      headerFacets: headerFacets,
      headerSection: headerSection,
      headerActions: removeDuplicateActions(headerActions),
      sections: sections,
      footerActions: footerActions,
      showHeader: manifestWrapper.getShowObjectPageHeader(),
      showAnchorBar: manifestWrapper.getShowAnchorBar(),
      useIconTabBar: manifestWrapper.useIconTabBar()
    };
  };

  _exports.convertPage = convertPage;
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,